# tmuxのデフォルトシェル
set-option -g default-shell /usr/bin/fish

# true color
set-option -g default-terminal "screen-256color"
set-option -sa terminal-overrides ',xterm-256color:RGB'

# tmuxline.vim
if-shell "test -f ~/.tmuxline.conf" "source ~/.tmuxline.conf"

# マウス有効化
set-option -g mouse on

# コピーモード時にvimキーババインド
setw -g mode-keys vi

# 背景色
# 環境変数backgroundの値によって背景色を変更するので、.bashrc等にexport background=hogeしておくこと
# 色の指定はwindows terminalのカラースキームからハードコーディングしたもの
# ここと同時にinit.vim内でもハードコーディングしているため,windows terminalにてカラースキーム変更したときは両者とも変更する必要あり
if-shell -b 'printenv background| grep light' 'set -g window-active-style "bg=#fafafa"'
if-shell -b 'printenv background| grep light' 'set -g window-style "bg=#e0e0e0"'
if-shell -b 'printenv background| grep dark' 'set -g window-active-style "bg=#161821"'
if-shell -b 'printenv background| grep dark' 'set -g window-style "bg=#262831"'

# Neovim側にフォーカス情報を渡す
set-option -g focus-events on

# neovimで:checkhealthしたときにこれ設定しろって言われたやつ
set-option -sg escape-time 10

# WSL でコピー時、マウスドラッグ時にクリップボードにもコピー
if-shell "uname -a | grep Microsoft" '\
	bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "clip.exe"; \
	bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "clip.exe"; \
	bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "clip.exe"\
'

# キーバインド ------------------------------------
# shift-alt-j の書き方はM-J

# デタッチ
# bind -n M-d detach-client

# window の作成
bind -n M-n new-window # -n "#{pane_current_path}"
# window一覧
bind -n M-w choose-tree -Zw

# ペイン左右分割（デフォ%）
bind -n M-/ split-window -h -c "#{pane_current_path}"
# ペイン上下分割（デフォ"）
bind -n M-? split-window -c "#{pane_current_path}"

# alt x :ペイン終了
bind -n M-x confirm-before -p "kill-pane #P? (y/n)" kill-pane
# alt shift x :ウィンドウ終了
bind -n M-X confirm-before -p "kill-window #W? (y/n)" kill-window

# alt shift lh :ウインドウ選択
bind -n M-L next-window
bind -n M-H previous-window

# 設定リロード
bind -n M-r source-file ~/.tmux.conf \; display-message "Reloaded ~/.tmux.conf"

# session の作成, 移動
bind -n M-N new-session
bind -n M-J switch-client -n
bind -n M-K switch-client -p

# pane の分割
# bind -n M-v split-window -h -c "#{pane_current_path}"
# bind -n M-s split-window -v -c "#{pane_current_path}"

# vim-tmux-navigatorの設定
# alt-hjklでvimとtmux関係なく、vimのウィンドウ、tmuxのペインを移動する
# プラグイン自体はvim側でインストールしておく
# 今の所fish-shellでもうまく動いてる
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
# bind-key -n 'M-\/' if-shell "$is_vim" ':vsplit' 'split-window -h -c "#{pane_current_path}"'

# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    # "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    # "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R

# vscode上のターミナルでtmux起動しているときにcodeコマンドを有効にする
set-option -ga update-environment ' VSCODE_GIT_ASKPASS_NODE VSCODE_GIT_ASKPASS_MAIN VSCODE_IPC_HOOK_CLI PATH GIT_ASKPASS'
